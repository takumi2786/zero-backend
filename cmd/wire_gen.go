// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/jmoiron/sqlx"
	"github.com/takumi2786/zero-backend/internal/application/usecase"
	"github.com/takumi2786/zero-backend/internal/interface/controller"
	"github.com/takumi2786/zero-backend/internal/interface/repository"
	"github.com/takumi2786/zero-backend/internal/util"
	"go.uber.org/zap"
	"time"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func InitializeLoginController(cfg *util.Config, logger *zap.Logger, db *sqlx.DB) *controller.LoginController {
	userRepository := repository.NewUserRepository(db)
	authUserRepository := repository.NewAuthUserRepository(db)
	iTokenGenerator := usecase.NewJWTTokenGenerator()
	iLoginUsecase := usecase.NewLoginUsecase(cfg, logger, userRepository, authUserRepository, iTokenGenerator)
	loginController := controller.NewLoginController(logger, iLoginUsecase)
	return loginController
}

func InitializePostController(cfg *util.Config, logger *zap.Logger, db *sqlx.DB, ontextTimeout time.Duration) *controller.PostController {
	postRepository := repository.NewPostRepository(db)
	iPostUsecase := usecase.NewPostUsecase(postRepository, ontextTimeout)
	postController := controller.NewPostController(cfg, logger, iPostUsecase)
	return postController
}
